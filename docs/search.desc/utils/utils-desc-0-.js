searchState.loadedDescShard("utils", 0, "Compute the position of the last significant digit in the …\nCorrectly rounds value of a function at the given point …\nCorrectly rounds value of a function at the given point …\nRound a number to the given number of digits.\nCompute the condition number of a matrix.\nCompute the p-norm of a matrix.\nCompute the p-norm of a vector.\nComputes the upper bound of the error on x given that the …\nComputes the range of the error on x given that the error …\nThis function computes the root of a function using the …\nThis function computes the root of a function using the …\nCompute the number of iterations needed to reach the error …\nComputes the number of iterations needed to reach the …\nComputes the tolerance to use on x for the fixed point …\nThis function computes the root of a function using the …\nThis function computes the root of a function using Newton…\nThis function computes the root of a function using the …\nCreates an augmented matrix by combining a matrix and a …\nCreates and formats a header for the table.\nCreates and formats a row for the table.\nSolves non-linear systems using the fixed-point method.\nComputes the LU decomposition of a matrix with full …\nPerforms the Gauss-Seidel algorithm to solve the system Ax …\nChecks if the matrix is diagonally dominant. This means …\nSolve a system of linear equations using the iterative …\nPerforms the Jacobi algorithm to solve the system Ax = b.\nDecomposes a matrix A such that A = L + D + U\nComputes the solution of a linear system that minimizes …\nUnpacks the LU decomposition into the lower and upper …\nComputes a triangular matrix with 1’s on the diagonal by …\nPerform row permutations to make the diagonal elements the …\nSolves non-linear systems using the Newton method.\nComputes the LU decomposition of a matrix without pivoting.\nComputes the LU decomposition of a matrix without pivoting.\nComputes the LU decomposition of a matrix without pivoting.\nComputes the LU decomposition of a matrix with partial …\nPerforms the relaxation method to solve the system Ax = b.\nComputes the solution of a linear system using Cramer’s …\nSolves a linear system using the Gauss method.\nSolves a linear system using an LU decomposition.\nputes the solution of a linear system using the triangle …\nA f64 representing the perturbation used to compute the …\nThis type defines a function that takes a slice of f64 and …\nThis type defines a function that takes a single f64 and …\nDefines the possible errors that can occur when formatting …\nComputes the derivative of an arbitrary function at a …\nComputes the gradient of an arbitrary function at a given …\nReturns the argument unchanged.\nComputes at a given point the value of every function in a …\nComputes at a given point the gradient of every function …\nCalls <code>U::from(self)</code>.\nThis function formats a table with a header and contents.")